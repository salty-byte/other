/*
 * prog.h
 *
 * Created on: 2012/12/19
 * Author: salty-byte
 */


/* インクルードヘッダ */
#include <stdio.h>   /* Standard IO */
#include <stdlib.h>  /* Standard Library */
#include <string.h>  /* String */
#include <time.h>    /* Time: ランダムの生成のために必要 */
#include <termios.h> /* TermiOS: 非同期通信のための汎用ターミナルインターフェース  */
#include <unistd.h>  /* UNIX標準定数・型 */
#include <fcntl.h>   /* ファイルコントロール */
#define BLOCKS 12   /* ブロックの種類 */
#define ONEPOINT 100  /* 1行のみのポイント */
#define TWOPOINT 400  /* 同時消し2行のポイント */
#define THRPOINT 900  /* 同時消し3行のポイント */
#define FORPOINT 1600 /* 同時消し4行のポイント */
#define FPS      1800 /* 落下速度調整: Macだと2000, Unixだと1500くらい？ */

/* グローバル変数 */
int stage[21][26]; /* 壁や固定済ブロックデータの配列 */
int block[4][4];   /* ブロックデータの配列 */
int field[21][26]; /* 画面データの配列 */
int block_list[BLOCKS][4][4] = { /* ブロックのデータ */
  { { 0, 1, 0, 0 }, { 0, 1, 0, 0 }, { 0, 1, 0, 0 }, { 0, 1, 0, 0 } },   /* I */
  { { 0, 0, 0, 0 }, { 0, 1, 1, 0 }, { 0, 1, 0, 0 }, { 0, 1, 0, 0 } },   /* L */
  { { 0, 0, 1, 0 }, { 0, 1, 1, 0 }, { 0, 1, 0, 0 }, { 0, 0, 0, 0 } },   /* 逆S */
  { { 0, 1, 0, 0 }, { 0, 1, 1, 0 }, { 0, 0, 1, 0 }, { 0, 0, 0, 0 } },   /* S */
  { { 0, 0, 0, 0 }, { 0, 1, 0, 0 }, { 1, 1, 1, 0 }, { 0, 0, 0, 0 } },   /* T */
  { { 0, 0, 0, 0 }, { 0, 1, 1, 0 }, { 0, 1, 1, 0 }, { 0, 0, 0, 0 } },   /* O */
  { { 0, 0, 0, 0 }, { 0, 1, 1, 0 }, { 0, 0, 1, 0 }, { 0, 0, 1, 0 } },   /* 逆L */
  { { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 1, 0, 0 }, { 0, 0, 0, 0 } },   /* . */
  { { 0, 0, 0, 0 }, { 0, 1, 1, 1 }, { 0, 1, 1, 1 }, { 0, 1, 1, 1 } },   /* ■ */
  { { 0, 0, 0, 0 }, { 0, 0, 1, 0 }, { 0, 1, 1, 1 }, { 0, 0, 1, 0 } },   /* + */
  { { 0, 0, 1, 1 }, { 0, 0, 0, 1 }, { 0, 0, 0, 1 }, { 0, 1, 1, 1 } },  /* コ */
  { { 1, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 } } }; /* ランダム用 */

int lvspeed[15] = { 200, 180, 160, 140, 120, 105, 90, 75, 60, 50, 40, 30, 20, 15, 10 }; /* 落下速度 */
int y = 0;         /* ブロックの画面上でのy座標 */
int x = 4;         /* ブロックの画面上でのx座標 */
int oneline, twoline, threeline, fourline; /* 消したラインの数 */
int gameover = 0;  /* ゲームオーバー判定。新しいブロックが初期位置に置けなければ1になる。 */
int nextblock = 0; /* 新しいブロックがどの種類であるかを決める。0~6の乱数が入る。 */
int block_type;    /* ブロックの種類用。0~6の乱数を入れる */
int level = 1;     /* ゲームのレベル。pointが2000上るごとに+1される。最高15 */
int point = 0;     /* 獲得ポイント。ラインが消えるごとに上る */
int toffset = 0;   /* 最下段までブロックが行った時に下ボタンを押した時に加算されるタイマー */

/* 新しく作ったグローバル変数 */
int mode = 1; /* ゲームのモードを決める */
int level_2 = 1; /* 変更後のlevel保存用 */
int nochan = 0; /* 1のとき回転を禁止する */
int tateritu = 0; /* 1のとき縦棒の落ちてくる率があがる */
int nexth = 0; /* 1のときnextが表示されない */
int width = 12; /* ゲームの横幅(壁も含む)。最高で26 */

/* 関数プロトタイプ宣言 */
void Initialize();          /* ゲーム起動直後の初期設定を行う関数。画面と壁のデータを初期化 */
int CreateBlock();          /* 落ちてくるブロックの作成を行う関数 */
void ShowGameField();       /*  field[][]の中身に応じて、ゲーム画面を表示する関数 */
void ControlBlock();        /* 落ちてくるブロックをキーに応じて移動や回転を行う関数 */
int CheckOverlap(int, int); /* 被りのチェックを行う関数 */
void MoveBlock(int, int);   /* 落ちてくるブロックの移動を行う関数 */
int TurnRightBlock();       /* 落ちてくるブロックの右回転を行う関数 */
int TurnLeftBlock();        /* 落ちてくるブロックの左回転を行う関数 */
void DropBlock();           /* ブロックを落とす関数。下に移動できない場合ブロックをその位置に固定*/
void LockBlock();           /* 着地したブロックを固定済みブロックに加える関数 */
void CheckLines();          /* 横列をチェックし、一列以上揃っているかの判定 */
int kbhit();                /* キーボードを1回ヒットしたかどうかの判定 */
int GetTimeOfLevel(int);    /* ブロックが一列分落ちるのにかかる時間の設定を行う関数 */
void GameStart();           /* ゲームのスタート画面を表示する関数 */

/* 新しくつくった関数 */
void Edit();  /* ゲームの設定を変更する関数 */
void E_3(); /* 補助コマンドを変更する関数 */
